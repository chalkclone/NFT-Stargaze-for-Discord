let lastMessageId: string | null = null;  // –∑–¥–µ—Å—å –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

export default async function handler(req, res) {
  try {
    const wallet = "stars1psaaa8z5twqgs4ahgqdxwl86eydmlwhevugcdx";
    const webhookUrl = "https://discord.com/api/webhooks/1390047...SpvDUQKjEg6kDng8WH2WNXVuj-8ovkCXuEsMI-u04eCvhO_GaMkHUKWZ46cWLV";
    const apiUrl = `https://nft-api.mainnet.stargaze-apis.com/api/v1beta/profile/${wallet}/paginated_nfts?limit=100&offset=0`;

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö NFT
    const response = await fetch(apiUrl);
    const data = await response.json();
    const nfts = data.nfts || [];

    // –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ embed-–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ NFT
    const embeds: any[] = nfts.map((nft: any) => ({
      title: nft.name || nft.class_id || "NFT",      // –º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ ID –∫–æ–ª–ª–µ–∫—Ü–∏–∏
      image: { url: nft.image },                     // –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ NFT
      footer: { text: `Token ID: ${nft.token_id}` }, // –≤ —Ñ—É—Ç–µ—Ä–µ —É–∫–∞–∑—ã–≤–∞–µ–º ID —Ç–æ–∫–µ–Ω–∞
      fields: [
        { name: "Floor (STARS)", value: "N/A", inline: true },  // –∑–∞–º–µ–Ω–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–º —Ñ–ª–æ—Ä–æ–º
        { name: "Floor (USDC)",  value: "N/A", inline: true }   // –∑–∞–º–µ–Ω–∏—Ç—å —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–æ–º –≤ USDC
      ]
    }));

    // –ö–æ–Ω—Ç–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ —Å–ø–∏—Å–∫–æ–º NFT)
    const content = "üìÇ –ú–æ–∏ NFT:";
    const body = JSON.stringify({ content, embeds });

    if (!lastMessageId) {
      // –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
      const resWebhook = await fetch(webhookUrl + "?wait=true", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: body
      });
      if (!resWebhook.ok) {
        throw new Error(`Webhook POST error: ${resWebhook.status}`);
      }
      const result = await resWebhook.json();
      lastMessageId = result.id;  // —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    } else {
      // –ü–æ—Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–ø—É—Å–∫–∏: –æ–±–Ω–æ–≤–ª—è–µ–º (PATCH) —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const editUrl = `${webhookUrl}/messages/${lastMessageId}`;
      const resEdit = await fetch(editUrl, {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        body: body
      });
      if (!resEdit.ok) {
        throw new Error(`Webhook PATCH error: ${resEdit.status}`);
      }
    }

    res.status(200).send(`Updated ${nfts.length} NFTs`);
  } catch (error) {
    console.error("Cron error:", error);
    res.status(500).send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π NFT.");
  }
}
